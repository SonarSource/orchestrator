/*
 * Orchestrator
 * Copyright (C) 2011 SonarSource
 * sonarqube@googlegroups.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package com.sonar.orchestrator.selenium;

import javax.annotation.Nullable;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class SeleneseSuiteGenerator {

  /**
   * Selenese suites only accept relative path to tests. Absolute paths are not supported.
   * That's why html tests are copied in the same directory than the generated suite.
   */
  public File generateSuite(String suiteName, File toDir, File... htmlFiles) {
    String uniqueSuiteName = uniqueName(suiteName, htmlFiles);

    try {
      LoggerFactory.getLogger(getClass()).info("Generate Selenese HTML Suite into: " + toDir);
      FileUtils.forceMkdir(toDir);
      copyTests(toDir, htmlFiles);
      return createSuite(uniqueSuiteName, toDir, htmlFiles);

    } catch (IOException e) {
      throw new IllegalStateException("Fail to generate Selenese HTML Suite into: " + toDir, e);
    }
  }

  private static String uniqueName(String suiteName, File... htmlFiles) {
    for (File htmlFile : htmlFiles) {
      if (htmlFile.getName().equals(suiteName + ".html")) {
        return suiteName + "-suite";
      }
    }
    return suiteName;
  }

  private static File createSuite(String suiteName, File toDir, File... htmlFiles) throws IOException {
    File suite = new File(toDir, suiteName + ".html");
    FileWriter writer = new FileWriter(suite);
    try {
      writer.append("<!-- Generated by Orchestrator --><html><body><table><tr><td><b>Test suite</b></td></tr>");
      for (File htmlFile : htmlFiles) {
        writer
            .append("<tr><td><a href=\"./")
            .append(htmlFile.getName())
            .append("\">")
            .append(htmlFile.getName())
            .append("</a></td></tr>");
      }
      writer.append("</table></body></html>");
      return suite;

    } finally {
      IOUtils.closeQuietly(writer);
    }
  }

  private static void copyTests(File toDir, @Nullable File[] htmlFiles) throws IOException {
    if (htmlFiles == null || htmlFiles.length == 0) {
      throw new IllegalArgumentException("Selenium HTML suite must contain at least one test");
    }
    for (File htmlFile : htmlFiles) {
      if (htmlFile == null || !htmlFile.isFile() || !htmlFile.exists()) {
        throw new IllegalArgumentException("Selenium HTML test is not a valid file: " + htmlFile);
      }
      FileUtils.copyFileToDirectory(htmlFile, toDir, true);
    }
  }
}
